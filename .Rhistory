makeCacheMatrix <- function(x = matrix()) {
solve(x)
}
x = matrix(c(2, 1, 6, 4), byrow = T, nrow = 3)
x
x = matrix(c(2, 1, 6, 4), byrow = T, nrow = 2)
x
makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
matrix <<- solve(x)
}
makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
mat <<- solve(x)
}
makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
## @x: output of makeCacheMatrix()
## return: inverse of the original matrix input to makeCacheMatrix()
inv = x$getinv()
# if the inverse has already been calculated
if (!is.null(inv)){
# get it from the cache and skips the computation.
message("getting cached data")
return(inv)
}
# otherwise, calculates the inverse
mat.data = x$get()
inv = solve(mat.data, ...)
# sets the value of the inverse in the cache via the setinv function.
x$setinv(inv)
return(inv)
}
cacheSolve(x)
library(dplyr)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- solve(x)
getinv <- function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
makeCacheMatrix(x)
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- solve(x)
getinv <- function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
cacheSolve <- function(x, ...) {
## @x: output of makeCacheMatrix()
## return: inverse of the original matrix input to makeCacheMatrix()
inv = x$getinv()
# if the inverse has already been calculated
if (!is.null(inv)){
# get it from the cache and skips the computation.
message("getting cached data")
return(inv)
}
# otherwise, calculates the inverse
mat.data = x$get()
inv = solve(mat.data, ...)
# sets the value of the inverse in the cache via the setinv function.
x$setinv(inv)
return(inv)
}
makeCacheMatrix(x)
cacheSolve(x)
x<-matrix(c(2, 1, 6, 4), nrow = 2)
makeCacheMatrix(x)
cacheSolve(x)
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- solve(x)
getinv <- function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
x<-matrix(c(2,1,6,4), nrow = 2)
makeCacheMatrix(x)
cacheSolve(x)
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
x<-matrix(c(2,1,6,4), nrow = 2)
makeCacheMatrix(x)
cacheSolve(x)
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
x<-matrix(c(2,1,6,4), nrow = 2)
makeCacheMatrix(x)
cacheSolve(x)
m1 <- makeCacheMatrix(x)
cacheSolve(m1)
x
